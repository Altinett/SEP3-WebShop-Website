@page "/browse/{CategoryId?}"
@page "/browse"
@using global::Shared
@using BlazorWasm.Services
@inject ISearchService SearchService


<div class="br-container">
    <div class="form-group">
        <FormInput @bind-Prop=Min Name="Min" Text="Minimum pris" Required="false"/>
        <FormInput @bind-Prop=Max Name="Max" Text="Maximum pris" Required="false"/>
        <div class="secondary-button round" @onclick="UpdateProducts">Filtrer</div>
    </div>
    <div class="br-content">
        <Grid>
            @if (IsLoading) {
                <div class="grid-state">Indl√¶ser...</div>
            } else if (Products.Count == 0) {
                <div class="grid-state">Ingen varer</div>
            } else {
                @foreach (Product product in Products)
                {
                    <GridItem
                        context=@((object)product)
                        Id=@product.Id
                        Img=@product.Image
                        name=@product.name
                        amount=@product.amount
                        description=@product.description
                        price=@product.Price
                        InStock=@product.InStock/>
                }
            }
        </Grid>
        <PageNavigator OnPageChanged="() => UpdateProducts()"/>
    </div>
</div>



@code {
    [Parameter] public string CategoryId { get; set; } = "";
    private List<Product> Products = new();
    public int Max;
    public int Min;
    public bool IsLoading = true;

    protected override async Task OnInitializedAsync() {
        try {
            Max = SearchService.Max;
            Min = SearchService.Min;
            UpdateProducts();
        } catch (Exception e) {
            Console.WriteLine(e);
        }
    }

    private async Task UpdateProducts()
    {
        IsLoading = true;
        List<int> categories = new();
        Console.WriteLine("brother what you dodod doin?");

        if (Min > Max && Min != 0 && Max != 0) {
            (Min, Max) = (Max, Min);
        }
        SearchService.Min = Min;
        SearchService.Max = Max;
        
        if (!string.IsNullOrEmpty(CategoryId)) {
            int category = int.Parse(CategoryId);
            if (category != 0) {
                categories.Add(category);
                SearchService.Categories = categories;
            }
        } else {
            SearchService.Categories = categories;
        }
        
        Products = await SearchService.Search();
        IsLoading = false;
        /*
        if (Products.Count == 0) {
            Products = await SearchService.Search();
        } else {
            Products = SearchService.Products;
        }*/
        StateHasChanged();
    }
}