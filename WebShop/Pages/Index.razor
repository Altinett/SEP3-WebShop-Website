@page "/"
@using WebShop.Services.HTTP
@using WebShop.Shared.DTOs


<div class="ho-container">
	
	<div class="ho-content">
		<div class="ho-box-group">
			
			@foreach (var category in Categories) {
				<CategoryBox
					id=@category.id
					Img=@GetNextImageUrl()
					title=@category.name
					desc=""/>
			}
		</div>
	</div>
</div>

@code {
	private List<CategoryDto> Categories = new();
	private CategoryService _categoryService = CategoryService.getInstance();
	private List<string> ImageUrls = new List<string> {
		"https://images.unsplash.com/photo-1498049794561-7780e7231661?q=80&w=1770&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		"https://images.unsplash.com/photo-1489987707025-afc232f7ea0f?q=80&w=1770&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		"https://plus.unsplash.com/premium_photo-1676321046262-4978a752fb15?q=80&w=1771&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		"https://images.unsplash.com/photo-1526243741027-444d633d7365?q=80&w=1771&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		"https://images.unsplash.com/photo-1646504458774-dbad0e941c14?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		"https://images.unsplash.com/photo-1601654253194-260e0b6984f9?q=80&w=1999&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
	// Add more image URLs as needed
	};
	private int currentImageUrlIndex = 0;

	protected override async Task OnInitializedAsync()
	{
		
		try {
			if (_categoryService.GetCategories() == null){
				Categories = await _categoryService.UpdateCategory();
			} else {
				_categoryService.UpdateCategory();
				Categories = _categoryService.GetCategories();
			}
			StateHasChanged();
		} catch (Exception e) {
			Console.WriteLine(e);
		}
		
	}
	
	private string GetNextImageUrl()
	{
	// Get the next image URL in order
		string imageUrl = ImageUrls[currentImageUrlIndex];
        
	// Increment the index or reset to 0 if it reaches the end
		currentImageUrlIndex = (currentImageUrlIndex + 1) % ImageUrls.Count;
        
		return imageUrl;
	}
}