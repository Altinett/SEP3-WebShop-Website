@page "/product"
@using global::Shared
@using BlazorWasm.Services.Http


<!--<h3>ProductDetails</h3>-->
@if (product != null)
{
    <div class="pdSuperDiv">
                <div class="secondary-button round pdButton" onclick="history.back()">
                    <Icon Name="return"/>
                    <!--
                    <svg xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512"><path d="M68.4 192A20.38 20.38 0 0048 212.2a17.87 17.87 0 00.8 5.5L100.5 400a40.46 40.46 0 0039.1 29.5h232.8a40.88 40.88 0 0039.3-29.5l51.7-182.3.6-5.5a20.38 20.38 0 00-20.4-20.2H68.4zm193.32 160.07A42.07 42.07 0 11304 310a42.27 42.27 0 01-42.28 42.07z" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32"/><path fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32" d="M160 192l96-128 96 128"/></svg>
                    -->
                    <div>Gå tilbage</div>
                </div>
<div>
    <h1>@product.name</h1>
    <div class="pdPurpleLine"></div>
    <div class="reInline pdBackDiv">
        <div>
            <div>
                <img class="pdImage" src="data:image/png;base64, @product.Image"/>
            </div>
        </div>
        <div class="pdDivSide">
            <div class="pdStockText">
                <p>@product.amount på lager</p>
            </div>
            <div class="price">
                @product.Price DKK
            </div>
            <div class="primary-button round pdButton pdButtonBuy" @onclick="AddToBasket">
                    <Icon Name="basket"/>
                <!--
                <svg xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512"><path d="M68.4 192A20.38 20.38 0 0048 212.2a17.87 17.87 0 00.8 5.5L100.5 400a40.46 40.46 0 0039.1 29.5h232.8a40.88 40.88 0 0039.3-29.5l51.7-182.3.6-5.5a20.38 20.38 0 00-20.4-20.2H68.4zm193.32 160.07A42.07 42.07 0 11304 310a42.27 42.27 0 01-42.28 42.07z" fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32"/><path fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="32" d="M160 192l96-128 96 128"/></svg>
                -->
                <div>Læg i kurv</div>
            </div>
        </div>
    </div>
</div>
        <div class="pdDescription">
            <h2>Produkt Beskrivelse</h2>
            <p> @product.description</p>
        </div>
    
        </div>
    
    }





@code {
    //TODO make a go back icon for the back button
    [Parameter]public string productId { get; set; }
    [Parameter] public Product product { get; set; }
    /*
    [Parameter] public int Id { get; set; }
    [Parameter] public string Img { get; set; }
    [Parameter] public string name { get; set; }
    [Parameter] public double price { get; set; }
    [Parameter] public bool InStock { get; set; }
    [Parameter] public bool? InBasket { get; set; } 
    [Parameter] public int? amount { get; set; }
    [Parameter] public int quantity { get; set; }
    [Parameter] public string description { get; set; }
    */
    private List<Product> products = new();
    private ProductService productService = ProductService.getInstance();
    private BasketService _basketService = BasketService.getInstance();

    protected override async Task OnInitializedAsync()
    {
        //product = productService.GetProductById(int.Parse(productId);
        product = productService.GetLastReviewedProduct();
        
        //Changed it because of it saying there could be a null point exception
        int? amount =  _basketService.GetProductAmount(product.Id);
        if (amount != null)
        product.amount = amount;
        //product = await productService.GetProductById(int.Parse(productId));
        
        

    // Now, you may want to handle the case where Product is null
        //if (product == null) //TODO could make a 404 page???
        /*    
        try {
            if (productService.GetProductById(int.Parse(productId)) == null){
                products = await productService.prod();
            } else {
                _categoryService.UpdateCategory();
                Categories = _categoryService.GetCategories();
            }
            StateHasChanged();
        } catch (Exception e) {
            Console.WriteLine(e);
        }   
        
    */
        await base.OnInitializedAsync();
    }

    private async void AddToBasket()
    {
        Console.WriteLine("ADDING");
        Console.WriteLine(product.InStock || product.amount > 0);
        Console.WriteLine(product.amount);
        //isButtonClick = true;
        if (product.InStock || product.amount > 0)
        {
            int? amount = product.amount;
            Console.WriteLine("Inside before");
            Console.WriteLine(product.InStock);
            product.InStock = await _basketService.AddItem(product.Id);
            product.amount = amount == product.amount ? product.amount - 1 : product.amount;
            Console.WriteLine("Inside after");
            Console.WriteLine(product.InStock);
            //product.amount -= 1;
    //product.amount--;
            StateHasChanged();
        };
    }
    
}