@page "/Admin"
@using BlazorWasm.Services
@using System.Security.Claims
@inject IAuthService authService
@inject NavigationManager navMgr
@inject IProductService ProductService

@if (isLoggedIn)
{
    <form @onsubmit="Add">
    <h2> 
        Tilføj en vare
    </h2>

    <label for="Name">Vare Navn:</label><br>
    <input id="Name" placeholder="Vare Navn" type="text" @bind="Name"/> <br/>
    <label for="Description">Beskrivelse:</label><br>
    <input id="Description" placeholder="Beskrivelse" type="text" @bind="Description"/> 

<br/><input type="checkbox" id="elektronik" value="1" @onchange="() => HandleCheckboxChange(1)"> <label for="elektronik">Elektronik</label><br />
    <input type="checkbox" id="have" value="2" @onchange="() => HandleCheckboxChange(2)"> <label for="have">Have</label><br />
    <input type="checkbox" id="indendørs" value="3" @onchange="() => HandleCheckboxChange(3)"> <label for="indendørs">Indendørs</label><br />
    <input type="checkbox" id="Døden" value="4" @onchange="() => HandleCheckboxChange(4)"> <label for="Døden">Døden</label><br />

    <label for="Price">Pris:</label><br>
    <input id="Price" placeholder="Pris" type="number" @bind="Price" min="0"/> <br/>
    <label for="Amount">Mængde:</label><br>
    <input id="Amount" placeholder="Mængde" type="number" @bind="Amount" min="0"/> <br/>
    
    <label for="Image">Billede:</label>
    <InputFile OnChange="ImageUpload" id="Image" accept="image/jpeg, image/png"></InputFile>
    <!--
    <input id="Image" type="file" @bind="Image" accept="image/jpeg, image/png" />
    -->
    <input type="submit" value="Tilføj">
</form> 

<form @onsubmit="Remove">
    <h2> 
        Fjern en vare
    </h2>
    <label for="id">id:</label>
    <br>
    <input type="number" id="FirstName" @bind="FjernId" name="FirstName"><br>

    <input type="submit" value="Fjern">
</form> 

<form @onsubmit="Edit">
    <h2> 
        Ændre vare
    </h2>

       <label for="id">Id:</label><br>
       <input id="id" placeholder="id" type="number" @bind="Id" min="0"/> <br/>

    <label for="Name">Vare Navn:</label><br>
    <input id="Name" placeholder="Vare Navn" type="text" @bind="Name"/> <br/>
    <label for="Description">Beskrivelse:</label><br>
       <input id="Description" placeholder="Beskrivelse" type="text" @bind="Description"/> <br>
<!--
<br/><input type="checkbox" id="elektronik" value="1" @onchange="() => HandleCheckboxChange(1)"> <label for="elektronik">Elektronik</label><br />
    <input type="checkbox" id="have" value="2" @onchange="() => HandleCheckboxChange(2)"> <label for="have">Have</label><br />
    <input type="checkbox" id="indendørs" value="3" @onchange="() => HandleCheckboxChange(3)"> <label for="indendørs">Indendørs</label><br />
    <input type="checkbox" id="Døden" value="4" @onchange="() => HandleCheckboxChange(4)"> <label for="Døden">Døden</label><br />-->

    <label for="Price">Pris:</label><br>
    <input id="Price" placeholder="Pris" type="number" @bind="Price" min="0"/> <br/>
    <label for="Amount">Mængde:</label><br>
    <input id="Amount" placeholder="Mængde" type="number" @bind="Amount" min="0"/> <br/>

    <input type="submit" value="Ændre">
</form> 

    <form @onsubmit="OrderDetail">
        <h2> 
            Se kundeordre
        </h2>
        <label for="id">id:</label>
        <br>
        <input type="number" id="FirstName" @bind="OrderId" name="FirstName"><br>

        <input type="submit" value="Find ordre">
    </form> 
    
<button class="btn btn-primary" @onclick="logout">Log ud</button>

}
else
{
    <div>You are not logged in</div>
}

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private string? id;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name!;
        Claim idClaim = userClaims.FirstOrDefault(c => c.Type == "User ID");
        id = idClaim?.Value;
    }
    
    List<int> category_ids = new List<int>();

    void HandleCheckboxChange(int checkboxValue)
    {
        if (category_ids.Contains(checkboxValue))
        {
            category_ids.Remove(checkboxValue);
        }
        else
        {
            category_ids.Add(checkboxValue);
        }
    }
    
    private string Name, Description;
    private IBrowserFile Image;
    private int Category_id, Id;
    private int? Price, Amount, FjernId, OrderId;
    //private string MessageColor = "red";
    //private bool Hide = true;
    //private string? MessageLabel;

    private async Task ImageUpload(InputFileChangeEventArgs e)
    {
        Image = e.File;
    }
    
    private async Task Add()
    {

        Console.WriteLine(category_ids);
        Console.WriteLine(Name + " " + Description + " " + category_ids + " " + Price + " " + Amount);
        Console.WriteLine("DONE");
        try
        {
            if (Price != null && Amount != null)
            {
                await ProductService.CreateProduct(Name, Description, category_ids, Price ?? 0, Amount ?? 0, Image);
            }
            //SuccessMessage("Successfully created user");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            //ErrorMessage("Something went wrong creating a user");
        }
    }
    
    private async Task Remove() {

        try
        {
            if (FjernId != null)
            {
                await ProductService.RemoveProduct(FjernId ??0);
            }
    //SuccessMessage("Successfully created user");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
    //ErrorMessage("Something went wrong creating a user");
        }
    }
    
    private async Task Edit()
    {

        Console.WriteLine(category_ids);
        Console.WriteLine(Name + " " + Description + " " + category_ids + " " + Price + " " + Amount);
        Console.WriteLine("DONE");
        try
        {
            if (Price != null && Amount != null)
            {
                await ProductService.EditProduct(Id, Name, Description, /*category_ids,*/ Price ?? 0, Amount ?? 0);
            }
    //SuccessMessage("Successfully created user");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
    //ErrorMessage("Something went wrong creating a user");
        }
    }

    private async Task OrderDetail()
    {
        navMgr.NavigateTo($"/admin/{OrderId}");
    }

    private async Task logout()
    {
        await authService.LogoutAsync();
        navMgr.NavigateTo("/login");
    }

}
