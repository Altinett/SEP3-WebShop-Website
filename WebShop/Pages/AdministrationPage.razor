@page "/Admin"
@using BlazorWasm.Services
@using System.Security.Claims
@using global::Shared
@using WebShop.Shared.DTOs
@using WebShop.Services.HTTP
@using System.Security.AccessControl
@inject IAuthService authService
@inject NavigationManager navMgr
@inject IProductService ProductService

@layout EmptyLayout

<div class="admin-container">
    
@if (true) {
    <div>
        <p>Logget ind som: @username ID: @id</p>
        <p>@firstname</p>
        <p>@lastname</p>
        <p>@email</p>
        <button class="primary-button" @onclick="Logout">Log ud</button>
    </div>

    
    <form @onsubmit="AddProduct">
        <h2>Tilføj en vare</h2>
        <div class="group">
            <label for="Name">Vare Navn:</label>
            <input id="Name" placeholder="Vare Navn" type="text" @bind="Name"/> 
        </div>
        <div class="group">
            <label for="Description">Beskrivelse:</label>
            <input id="Description" placeholder="Beskrivelse" type="text" @bind="Description"/> 
        </div>
        @foreach (var category in categories)
        {
            <div class="group">
                <input type="checkbox" id="@category.name" value="@category.id" @onchange="() => HandleCheckboxChange(category.id)">
                <label for="@category.name">@category.name</label>
            </div>
        }
        <div class="group">
            <label for="Price">Pris:</label>
            <input id="Price" placeholder="Pris" type="number" @bind="Price" min="0" step="any"/>
        </div>
        <div class="group">
            <label for="Amount">Mængde:</label>
            <input id="Amount" placeholder="Mængde" type="number" @bind="Amount" min="0"/>
        </div>
        <div class="group">
            <label for="Image">Billede:</label>
            <InputFile OnChange="ImageUpload" id="Image" accept="image/jpeg, image/png"></InputFile>
        </div>
        <input class="primary-button" type="submit" value="Tilføj">
    </form>

    <form @onsubmit="Remove">
        <h2>Fjern en vare</h2>
        
        <div class="group">
            <label for="productName">id:</label>
            <input type="number" id="productName" @bind="FjernId">
        </div>

        <input class="primary-button" type="submit" value="Fjern">
    </form> 

    <form @onsubmit="() => validProduct()">
        <h2>Ændre vare</h2>
        
        <div class="group">
            <label for="productId">id:</label>
            <input id="productId" placeholder="id" type="number" @bind="Id" min="0"/>
        </div>
        
        @if (isValidProduct)
        {
            <div class="group">
                <label for="Name">Vare Navn:</label>
                <input id="Name" placeholder="Vare Navn" type="text" @bind="Name"/> 
            </div>
            <div class="group">
                <label for="Description">Beskrivelse:</label>
                <input id="Description" placeholder="Beskrivelse" type="text" @bind="Description"/>
            </div>
            <div class="group">
                <label for="Price">Pris:</label>
                <input id="Price" placeholder="Pris" type="number" @bind="Price" min="0" step="any"/>
            </div>
            <div class="group">
                <label for="Amount">Mængde:</label>
                <input id="Amount" placeholder="Mængde" type="number" @bind="Amount" min="0"/>
            </div>
            <div class="group">
                <label for="Image">Billede:</label>
                <InputFile OnChange="ImageUpload" id="Image" accept="image/jpeg, image/png"></InputFile>
            </div>
            <button class="primary-button" type="button" @onclick="Edit">Ændre</button>
        } else {
            <input class="primary-button" type="submit" value="Ændre">
        }
    </form>

    <form @onsubmit="OrderDetail">
        <h2>Se kundeordre</h2>
        <div class="group">
            <label for="id">id:</label>
            <input type="number" id="FirstName" @bind="OrderId" name="FirstName" >
        </div>

        <input class="primary-button" type="submit" value="Find ordre">
    </form> 
    <div class="message">@statusLabel</div>
    }
    else
    {
        <div>You are not logged in</div>
    }
</div>

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private List<CategoryDto> categories = new();
    private CategoryService _categoryService = CategoryService.getInstance();
    
    private string? firstname;
    private string? lastname;
    private string? username;
    private string? email;
    private int? id; 
    private bool isLoggedIn;
    private UserDto? userDto;
    private string statusLabel;
    private IBrowserFile? Image;
    private string savedImage;

    private bool isValidProduct;
    
    private async Task ImageUpload(InputFileChangeEventArgs e)
    {
        Image = e.File;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        try {
            if (_categoryService.GetCategories() == null){
                categories = await _categoryService.UpdateCategory();
            } else {
                _categoryService.UpdateCategory();
                categories = _categoryService.GetCategories();
            }
        } catch (Exception e) {
            Console.WriteLine(e);
        }
        
        if (!isLoggedIn) return;
        UserDto userCredentials = authService.GetUser();
        firstname = userCredentials.firstname;
        lastname = userCredentials.lastname;
        username = userCredentials.username;
        email = userCredentials.email;
        id = userCredentials.id;
        

    }
    
    List<int> category_ids = new List<int>();

    void HandleCheckboxChange(int checkboxValue)
    {
        if (category_ids.Contains(checkboxValue))
        {
            category_ids.Remove(checkboxValue);
        }
        else
        {
            category_ids.Add(checkboxValue);
        }
        Console.WriteLine("Added " + checkboxValue);
    }
    
    private string Name, Description;
    private int Category_id, Id;
    private int? Amount, FjernId, OrderId;
    private double? Price;
    //private string MessageColor = "red";
    //private bool Hide = true;
    //private string? MessageLabel;
    
    private async Task AddProduct()
    {
        try
        {
            ValidateInput();
            await ProductService.CreateProduct(Name, Description, category_ids, Price.Value, Amount.Value, Image);
            ClearForm();
            statusLabel = "Product created successfully";
        }
        catch (ArgumentException ex)
        {
            statusLabel = $"Argument exception: {ex.Message}";
        }
        catch (Exception e)
        {
            statusLabel = $"Error: {e.Message}";
        }
        await InvokeAsync(StateHasChanged); // Ensure UI is updated asynchronously
    }

    private void ValidateInput()
    {
        if (string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(Description))
            throw new ArgumentException("Name and description are required.");
        
        if (Price == null || Amount == null || Price <= 0 || Amount <= 0)
        {
            throw new ArgumentException("Price and amount are required.");
        }

        if (category_ids == null || category_ids.Count == 0)
        {
            Console.WriteLine("MHM");
            throw new ArgumentException("Select at least one category.");
        }
        
        if (Image == null)
            throw new ArgumentException("Image is required.");
    }

    private void ClearForm()
    {
        Name = "";
        Description = "";
        Price = null;
        Amount = null;
        Id = 0;
    }

    
    private async Task Remove()
    {
        isValidProduct = false;
        try
        {
            if (FjernId == null || FjernId == 0)
            {
                statusLabel = "Indsæt et gyldigt id";
                return;
            }

            var product = await ProductService.GetProductById(FjernId);

            if (product == null)
            {
                statusLabel = "Produktet findes ikke";
            }
            else if (product.flagged)
            {
                statusLabel = "Produktet er allerede slettet";
            }
            else
            {
                await ProductService.RemoveProduct(FjernId);
                statusLabel = "Produkt fjernet";
            }
            FjernId = null;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            statusLabel = $"Error: {e.Message}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void validProduct()
    {
        if (Id <= 0)
        {
            statusLabel = "Indsæt et gyldigt id";
            isValidProduct = false;
            return;
        }
        Product product = await ProductService.GetProductById(Id);

        if (product == null)
        {
            statusLabel = "Produktet findes ikke";
            return;
        }

        if (product.flagged)
        {
            statusLabel = "Produktet er fjernet og kan derfor ikke ændres";
            return;
        }
        Name = product.name;
        Description = product.description;
        Price = product.Price;
        Amount = product.amount;
        savedImage = product.Image;
        isValidProduct = true;
        
        StateHasChanged();
    }
    
    private async Task Edit()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(Description))
            {
                statusLabel = "Navnet og beskrivelsen kan ikke være tomme";
                return;
            }

            if (Price == null || Amount == null || Price <= 0 || Amount <= 0)
            {
                statusLabel = "Prisen og mængden skal være større end eller lig med 0";
                return;
            }

            await ProductService.EditProduct(Id, Name, Description, Price.Value, Amount.Value, Image, savedImage);
            isValidProduct = false;
            statusLabel = "Produkt ændret";
        }
        catch (Exception e)
        {
    // Log the exception or handle it appropriately
            Console.WriteLine(e);
            statusLabel = $"Error: {e.Message}";
        }
        finally
        {
    // Update the UI asynchronously, regardless of success or failure
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task OrderDetail()
    {
        navMgr.NavigateTo($"/admin/{OrderId}");
    }

    private async Task Logout()
    {
        await authService.LogoutAsync();
        navMgr.NavigateTo("/login");
    }
    // TODO MAKE IT REDIRECT TO LOGIN PAGE IF NOT ALREADY LOGGED IN (/admin)
    //TODO fix ændre produktet til ikke at kunde ændre ID
    //TODO muligt at ændre katagorier
}

