@page "/Admin"
@using BlazorWasm.Services
@using System.Security.Claims
@using global::Shared
@using WebShop.Services.HTTP
@using WebShop.Shared.DTOs
@inject IAuthService authService
@inject NavigationManager navMgr
@inject IProductService ProductService

{
    <div>
            <p>Logget ind som: @username ID: @id</p>
            <P>@firstname</P>
            <p>@lastname</p>
            <p>@email</p>
    </div>

    
    <form @onsubmit="Add">
    <h2> 
        Tilføj en vare
    </h2>

    <label for="Name">Vare Navn:</label><br>
    <input id="Name" placeholder="Vare Navn" type="text" @bind="Name"/> <br/>
    <label for="Description">Beskrivelse:</label><br>
    <input id="Description" placeholder="Beskrivelse" type="text" @bind="Description"/> 

    <br/>
    @foreach (var category in categories)
    {
        <input type="checkbox" id="@category.name" value="@category.id" @onchange="() => HandleCheckboxChange(1)"> <label for="@category.name">@category.name</label><br />
    }
    

    <label for="Price">Pris:</label><br>
    <input id="Price" placeholder="Pris" type="number" @bind="Price" min="0"/> <br/>
    <label for="Amount">Mængde:</label><br>
    <input id="Amount" placeholder="Mængde" type="number" @bind="Amount" min="0"/> <br/>
    
        <label for="Image">Billede:</label>
        <InputFile OnChange="ImageUpload" id="Image" accept="image/jpeg, image/png"></InputFile>
        <!--
        <input id="Image" type="file" @bind="Image" accept="image/jpeg, image/png" />
        -->
    
    <input type="submit" value="Tilføj">

</form> 

<form @onsubmit="Remove">
    <h2> 
        Fjern en vare
    </h2>
    <label for="id">id:</label>
    <br>
    <input type="number" id="FirstName" @bind="FjernId" name="FirstName"><br>

    <input type="submit" value="Fjern">
</form> 

<form @onsubmit="Edit">
    <h2> 
        Ændre vare
    </h2>

       <label for="id">Id:</label><br>
       <input id="id" placeholder="id" type="number" @bind="Id" min="0"/> <br/>

    <label for="Name">Vare Navn:</label><br>
    <input id="Name" placeholder="Vare Navn" type="text" @bind="Name"/> <br/>
    <label for="Description">Beskrivelse:</label><br>
       <input id="Description" placeholder="Beskrivelse" type="text" @bind="Description"/> <br>
<!--
<br/><input type="checkbox" id="elektronik" value="1" @onchange="() => HandleCheckboxChange(1)"> <label for="elektronik">Elektronik</label><br />
    <input type="checkbox" id="have" value="2" @onchange="() => HandleCheckboxChange(2)"> <label for="have">Have</label><br />
    <input type="checkbox" id="indendørs" value="3" @onchange="() => HandleCheckboxChange(3)"> <label for="indendørs">Indendørs</label><br />
    <input type="checkbox" id="Døden" value="4" @onchange="() => HandleCheckboxChange(4)"> <label for="Døden">Døden</label><br />-->

    <label for="Price">Pris:</label><br>
    <input id="Price" placeholder="Pris" type="number" @bind="Price" min="0"/> <br/>
    <label for="Amount">Mængde:</label><br>
    <input id="Amount" placeholder="Mængde" type="number" @bind="Amount" min="0"/> <br/>

    <input type="submit" value="Ændre">
</form> 

    <form @onsubmit="OrderDetail">
        <h2> 
            Se kundeordre
        </h2>
        <label for="id">id:</label>
        <br>
        <input type="number" id="FirstName" @bind="OrderId" name="FirstName"><br>

        <input type="submit" value="Find ordre">
    </form> 
    
    <button class="btn btn-primary" @onclick="Logout">Log ud</button>
    
    <div class="field">
        @{
            string labelColor = statusLabel != null && (statusLabel.Contains("Produkt oprettet") || 
                                                        statusLabel.Contains("Produkt fjernet")  || 
                                                        statusLabel.Contains("Produkt ændret")) 
                ? "green" : "red";
        }
        <label style="color: @labelColor font-size: 400px;">
            @statusLabel
        </label>
    </div>

}
else
{
    <div>You are not logged in</div>
}

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private List<CategoryDto> categories = new();
    private CategoryService _categoryService = CategoryService.getInstance();
    
    private string? firstname;
    private string? lastname;
    private string? username;
    private string? email;
    private int? id; 
    private bool isLoggedIn;
    private UserDto? userDto;
    private string statusLabel;
    private IBrowserFile Image;
    
    private async Task ImageUpload(InputFileChangeEventArgs e)
    {
        Image = e.File;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        UserDto userCredentials = authService.GetUser();
        firstname = userCredentials.firstname;
        lastname = userCredentials.lastname;
        username = userCredentials.username;
        email = userCredentials.email;
        id = userCredentials.id;
        
        try {
            if (_categoryService.GetCategories() == null){
                categories = await _categoryService.UpdateCategory();
            } else {
                _categoryService.UpdateCategory();
                categories = _categoryService.GetCategories();
            }
        } catch (Exception e) {
            Console.WriteLine(e);
        }
    }
    
    List<int> category_ids = new List<int>();

    void HandleCheckboxChange(int checkboxValue)
    {
        if (category_ids.Contains(checkboxValue))
        {
            category_ids.Remove(checkboxValue);
        }
        else
        {
            category_ids.Add(checkboxValue);
        }
    }
    
    private string Name, Description;
    private int Category_id, Id;
    private int? Price, Amount, FjernId, OrderId;
    //private string MessageColor = "red";
    //private bool Hide = true;
    //private string? MessageLabel;
    
    private async Task Add()
    {
        StateHasChanged();
        try
        {
            if (string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(Description))
            {
                statusLabel = ("Name and Description cannot be empty or whitespace.");
            }
            else if (Price == null || Amount == null)
            {
                statusLabel = ("Price and Amount cannot be null.");
            }
            else
            {
                await ProductService.CreateProduct(Name, Description, category_ids, Price.Value, Amount.Value, Image);
                statusLabel = "Produkt oprettet"; 
                
                Name = "";
                Description = "";
                Price = null;
                Amount = null;
            }
    // Optionally, you can check for character limits here

        }
        catch (ArgumentException ex)
        {
            statusLabel = ($"Argument exception: {ex.Message}");
    // Handle or display the error as needed
    // ErrorMessage(ex.Message);
        }
        catch (Exception e)
        {
            statusLabel = ($"Error: {e.Message}");
    // Handle or display the error as needed
    // ErrorMessage("Something went wrong creating a product");
        }
    }
    
    private async Task Remove() {
        StateHasChanged();
        try
        {
            Console.WriteLine(ProductService.GetProductById(FjernId));
            var product = ProductService.GetProductById(FjernId);
            Product? product1 = await product;
            
            if (product1 == null)
            {
                statusLabel = "Produktet findes ikke";
            }
            else if (product1.flagged)
            {
                statusLabel = "Allerede slettet";
            }
            else
            {
                statusLabel = "Produkt fjernet";
            }
            /*
            if (FjernId != null)
            {
                string response = await ProductService.RemoveProduct(FjernId ?? 0);
                statusLabel = response;
                if (response.Equals("") || response == null)
                {
                    statusLabel = "Produktet findes ikke";
                }
                else
                {
                    statusLabel = "Produkt fjernet";
                }
            }
            else
            {
                statusLabel = "Id feltet er tomt";
            }
            */
    //SuccessMessage("Successfully created user");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
    //ErrorMessage("Something went wrong creating a user");
        }
    }
    
    private async Task Edit()
    {
        StateHasChanged();
        Console.WriteLine(category_ids);
        Console.WriteLine(Name + " " + Description + " " + category_ids + " " + Price + " " + Amount);
        Console.WriteLine("DONE");
        try
        {
            
            if (Price == null && Amount == null)
            {
                statusLabel = "Prisen og mængden kan ikke være tom";
            }
            else if(Name.Equals("") || Name == null && Description.Equals("") || Description == null)
            {
                statusLabel = "Navnet og prisen kan ikke være tom";
            }
            else
            {
                await ProductService.EditProduct(Id, Name, Description, Price ?? 0, Amount ?? 0);
                statusLabel = "Produkt ændret";
            }
    //SuccessMessage("Successfully created user");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
    //ErrorMessage("Something went wrong creating a user");
        }
    }

    private async Task OrderDetail()
    {
        navMgr.NavigateTo($"/admin/{OrderId}");
    }

    private async Task Logout()
    {
        await authService.LogoutAsync();
        navMgr.NavigateTo("/login");
    }

}