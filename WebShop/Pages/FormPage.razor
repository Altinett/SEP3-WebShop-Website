@page "/form"
@using System.Text.RegularExpressions
@using WebShop.Services.HTTP
@inject NavigationManager Nvm

<div class="forum-container">
    <div class="forum-content">
        <div class="forum-group">
            <form @onsubmit="ValidateForm">
                <label for="FirstName">Fornavn:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="FirstName" id="FirstName" name="FirstName" @oninput="(e) => RemoveNumber(e, nameof(FirstName))">
                </div><br>
                <label for="LastName">Efternavn:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="LastName" id="LastName" name="LastName" @oninput="(e) => RemoveNumber(e, nameof(LastName))">
                </div><br>
                <label for="Address">Adresse:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="Address" id="Address" name="Address">
                </div><br>
                <label for="ZipCode">Postnummer:</label><br>
                <div class="forum-input round">
                    <input type="number" @bind="ZipCode" id="ZipCode" name="ZipCode" min="0">
                </div><br>
                <label for="PhoneNumber">Telefon nr.:</label><br>
                <div class="forum-input round">
                    <input type="number" @bind="PhoneNumber" id="PhoneNumber" name="PhoneNumber" min="0">
                </div><br>
                <label for="Email">Email:</label><br>
                <div class="forum-input round">
                    <input type="email" @bind="Email" id="Email" name="Email">
                </div><br><br>
                <p class="validation-error">@ValidationMessage</p>
                <!-- disable submit until "FormIsValid" is true -->
                <div class="primary-button round" @onclick="ValidateForm" disabled="@(!FormIsValid)">Bekr√¶ft</div>
            </form>
        </div>
    </div>
</div>

@code {

    [Parameter] public string FirstName { get; set; }
    [Parameter] public string LastName { get; set; }
    [Parameter] public string Address { get; set; }
    [Parameter] public int ZipCode { get; set; }
    [Parameter] public int PhoneNumber { get; set; }
    [Parameter] public string Email { get; set; }
    
    private bool FormIsValid = false;
    private string ValidationMessage = "";
    
    private FormService _formService = FormService.getInstance();

    protected override void OnInitialized()
    {
        FirstName = _formService.FirstName;
        LastName = _formService.LastName;
        Address = _formService.Address;
        ZipCode = _formService.ZipCode;
        PhoneNumber = _formService.PhoneNumber;
        Email = _formService.Email;

        base.OnInitialized();
    }
    
    private void ValidateForm()
    {
        // Update the status message based on validation
        ValidationMessage = "";

        ValidationService validationService = ValidationService.GetInstance();

        try
        {
            _formService.FirstName = validationService.ValidateName(FirstName);
            _formService.LastName = validationService.ValidateName(LastName);
            _formService.Address = validationService.ValidateAddress(Address);
            _formService.ZipCode = validationService.ValidateZipCode(ZipCode);
            _formService.PhoneNumber = validationService.ValidatePhonenumber(PhoneNumber);
            _formService.Email = validationService.ValidateEmail(Email);
            Nvm.NavigateTo("/betaling");
        }
        catch (InvalidInputException e)
        {
            ValidationMessage = e.Message;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        // Return false if all input fields are invalid
        //return false;
    }

    private void RemoveNumber(ChangeEventArgs e, string InputName)
    {
        // Get the current input value
        var inputValue = e.Value?.ToString();

        // Remove numeric characters
        var cleanedValue = new string(inputValue?.Where(char.IsLetter).ToArray());

        // Update the corresponding property with the cleaned value
        GetType().GetProperty(InputName)?.SetValue(this, cleanedValue);
    }
}

}
