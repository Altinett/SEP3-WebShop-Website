@page "/form"
@inject NavigationManager Nvm

<div class="forum-container">
    <div class="forum-content">
        <div class="forum-group">
            <form @onsubmit="Submit">
                <label for="FirstName">Fornavn:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="FirstName" id="FirstName" name="FirstName" @oninput="(e) => RemoveNumber(e, nameof(FirstName))">
                </div><br>
                <label for="LastName">Efternavn:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="LastName" id="LastName" name="LastName" @oninput="(e) => RemoveNumber(e, nameof(LastName))">
                </div><br>
                <label for="Address">Adresse:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="Address" id="Address" name="Address">
                </div><br>
                <label for="ZipCode">Postnummer:</label><br>
                <div class="forum-input round">
                    <input type="number" @bind="ZipCode" id="ZipCode" name="ZipCode" min="0">
                </div><br>
                <label for="PhoneNumber">Telefon nr.:</label><br>
                <div class="forum-input round">
                    <input type="number" @bind="PhoneNumber" id="PhoneNumber" name="PhoneNumber" min="0">
                </div><br>
                <label for="Email">Email:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="Email" id="Email" name="Email">
                </div><br><br>
                
                <!-- disable submit until "FormIsValid" is true -->
                <div class="primary-button round" @onclick="Submit" disabled="@(!FormIsValid)">Bekr√¶ft</div>
            </form>
        </div>
    </div>
</div>

@code {

    [Parameter] public string FirstName { get; set; }
    [Parameter] public string LastName { get; set; }
    [Parameter] public string Address { get; set; }
    [Parameter] public int ZipCode { get; set; }
    [Parameter] public int PhoneNumber { get; set; }
    [Parameter] public string Email { get; set; }

    private bool FormIsValid = false;

    public void Submit()
    {
        // Check the validity of the form before submitting
        if (IsFormValid())
        {
            var instance = FormService.getInstance();

            instance.FirstName = FirstName;
            instance.LastName = LastName;
            instance.Address = Address;
            instance.ZipCode = ZipCode;
            instance.PhoneNumber = PhoneNumber;
            instance.Email = Email;

            Nvm.NavigateTo("/betaling");
        }
    }

    private bool IsFormValid()
    {
        // Return true if all input fields are valid, otherwise return false
        return !string.IsNullOrEmpty(FirstName) && !string.IsNullOrEmpty(LastName) && !string.IsNullOrEmpty(Address) &&
               ZipCode > 0 && PhoneNumber > 0 && !string.IsNullOrEmpty(Email);
    }

    private void RemoveNumber(ChangeEventArgs e, string InputName)
    {
        // Get the current input value
        var inputValue = e.Value?.ToString();

        // Remove numeric characters
        var cleanedValue = new string(inputValue?.Where(char.IsLetter).ToArray());

        // Update the corresponding property with the cleaned value
        GetType().GetProperty(InputName)?.SetValue(this, cleanedValue);

        // Update the form validity when any input changes
        FormIsValid = IsFormValid();
    }

}
