@page "/form"
@using WebShop.Services.HTTP
@using BlazorWasm.Services
@using WebShop.Shared.Exceptions
@inject NavigationManager NavigationManager
@inject IValidationService ValidationService
@inject IFormService FormService

<div class="forum-container">
    <div class="forum-content">
        <div class="forum-group">
            <form @onsubmit="ValidateForm">
                <label for="FirstName">Fornavn:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="FirstName" id="FirstName" name="FirstName" @oninput="e => RemoveNumber(e, nameof(FirstName))">
                </div><br>
                <label for="LastName">Efternavn:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="LastName" id="LastName" name="LastName" @oninput="e => RemoveNumber(e, nameof(LastName))">
                </div><br>
                <label for="Address">Adresse:</label><br>
                <div class="forum-input round">
                    <input type="text" @bind="Address" id="Address" name="Address">
                </div><br>
                <label for="ZipCode">Postnummer:</label><br>
                <div class="forum-input round">
                    <input type="number" @bind="ZipCode" id="ZipCode" name="ZipCode" min="0">
                </div><br>
                <label for="PhoneNumber">Telefon nr.:</label><br>
                <div class="forum-input round">
                    <input type="number" @bind="PhoneNumber" id="PhoneNumber" name="PhoneNumber" min="0">
                </div><br>
                <label for="Email">Email:</label><br>
                <div class="forum-input round">
                    <input type="email" @bind="Email" id="Email" name="Email">
                </div><br><br>
                <p class="validation-error">@ValidationMessage</p>
                <!-- disable submit until "FormIsValid" is true -->
                <div class="primary-button round" @onclick="ValidateForm" disabled="@(!FormIsValid)">Bekr√¶ft</div>
            </form>
        </div>
    </div>
</div>

@code {

    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Address { get; set; }
    public int ZipCode { get; set; }
    public int PhoneNumber { get; set; }
    public string Email { get; set; }
    
    public bool FormIsValid = false;
    public string ValidationMessage = "";

    protected override void OnInitialized() {
        FirstName = FormService.FirstName;
        LastName = FormService.LastName;
        Address = FormService.Address;
        ZipCode = FormService.ZipCode;
        PhoneNumber = FormService.PhoneNumber;
        Email = FormService.Email;

        base.OnInitialized();
    }
    
    private void ValidateForm() {
        ValidationMessage = "";

        try {
            FormService.FirstName = ValidationService.ValidateName(FirstName);
            FormService.LastName = ValidationService.ValidateName(LastName);
            FormService.Address = ValidationService.ValidateAddress(Address);
            FormService.ZipCode = ValidationService.ValidateZipCode(ZipCode);
            FormService.PhoneNumber = ValidationService.ValidatePhoneNumber(PhoneNumber);
            FormService.Email = ValidationService.ValidateEmail(Email);
            NavigationManager.NavigateTo("/payment");
        } catch (InvalidInputException e) {
            ValidationMessage = e.Message;
        } catch (Exception e) {
            Console.WriteLine(e.Message);
        }
    }

    private void RemoveNumber(ChangeEventArgs e, string inputName) {
        // Get the current input value
        var inputValue = e.Value?.ToString();

        // Remove numeric characters
        var cleanedValue = new string(inputValue?.Where(char.IsLetter).ToArray());

        // Update the corresponding property with the cleaned value
        GetType().GetProperty(inputName)?.SetValue(this, cleanedValue);
    }
}

}
